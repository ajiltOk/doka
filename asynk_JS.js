/*Promise - это объект, который используется для отложенных и асинхронных вычислений.
Базовый синтаксис:
let promise = new Promise (function(resolve, reject) {
})

Promise может находиться в двух состояниях:
- state («состояние») - вначале "pending" («ожидание»), потом меняется на "fulfilled" («выполнено успешно») при вызове resolve или на "rejected" («выполнено с ошибкой») при вызове reject.
- result («результат») - вначале undefined, далее изменяется на value при вызове resolve(value) или на error при вызове reject(error).

.then - функция, которая выполняется, когда промис переходит либо в состояние «выполнен успешно», и получает результат, либо  состояние «выполнен с ошибкой», и получает ошибку.
.catch - функция, которая выполняется, когда мы хотим обработать только ошибку.
.finally - функция, которая выполнится в любом случае, когда промис завершится: успешно или с ошибкой.

Методы промиса:
Promise.all(iterable) - возвращает промис, который исполнится после исполнения всех промисов в iterable. В случае, если любой из промисов будет отклонён, Promise.all будет также отклонён.
Promise.allSettled(iterable) - возвращает промис, который исполняется когда все полученные промисы завершены (исполнены или отклонены), содержащий массив результатов исполнения полученных промисов.
Promise.race(iterable) - возвращает промис, который будет исполнен или отклонён с результатом исполнения первого исполненного или отклонённого промиса из iterable.
//
//

Async/await - специальный синтаксис для работы с промисами.
У слова async один простой смысл: эта функция всегда возвращает промис.
Ключевое слово await  ждет до тех пор, пока промис справа от await не выполнится. После чего оно вернёт его результат, и выполнение кода продолжится.
*/
