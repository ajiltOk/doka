/*Promise - это объект, который используется для отложенных и асинхронных вычислений.
Базовый синтаксис:
let promise = new Promise (function(resolve, reject) {
})

Promise может находиться в следующих состояниях:
- вначале "pending" («ожидание»), потом меняется на "fulfilled" («выполнено успешно») при вызове resolve или на "rejected" («выполнено с ошибкой») 
при вызове reject.
- result («результат») - вначале undefined, далее изменяется на value при вызове resolve(value) или на error при вызове reject(error).

.then - функция, которая выполняется, когда промис переходит либо в состояние «выполнен успешно», и получает результат, либо состояние «выполнен с ошибкой», и получает ошибку.
.catch - функция, которая выполняется, когда мы хотим обработать только ошибку.
.finally - функция, которая выполнится в любом случае, когда промис завершится: успешно или с ошибкой.

Методы промиса:
Promise.all(iterable) - возвращает промис, который исполнится после исполнения всех промисов в iterable. В случае, если любой из промисов будет отклонён, Promise.all будет     
также отклонён.
Promise.allSettled(iterable) - возвращает промис, который исполняется когда все полученные промисы завершены (исполнены или отклонены), содержащий массив результатов
исполнения полученных промисов.
Promise.race(iterable) - возвращает промис, который будет исполнен или отклонён с результатом исполнения первого исполненного или отклонённого промиса из iterable.
//
//

Async/await - специальный синтаксис для работы с промисами.
У слова async один простой смысл: эта функция всегда возвращает промис.
Ключевое слово await ждет до тех пор, пока промис справа от await не выполнится. После чего оно вернёт его результат, и выполнение кода продолжится.
*/

/*Функция fetch() (которая является методом GlobalFetch) принимает два параметра:

- url — адрес, по которому нужно сделать запрос;
- options (необязательный) — объект конфигурации, в котором можно настроить метод запроса, тело запроса, заголовки и многое другое.

let promise = fetch(url, [options]). Без options это простой GET-запрос, скачивающий содержимое по адресу url.
Заголовки, которые запрещено устанавливать у параметра options: Connection, Content-Length, Cookie, Access-Control-Request-Headers, Host, Keep-Alive, Origin и др.

Процесс получения ответа обычно происходит в два этапа:

- promise выполняется с объектом встроенного класса Response в качестве результата, как только сервер пришлёт заголовки ответа. На этом этапе можно посмотреть код статуса      
запроса HTTP (response.status) и логическое значение (response.ok)
- для получения тела ответа нужно использовать дополнительный вызов одного из методов (response.text(), response.json(), response.formData(), response.blob(), response.arrayBuffer()).

Любой ответ на запрос через fetch() переводит Promise в состояние fulfilled. Промис перейдёт в состояние rejected только если запрос не случился из-за сбоя сети или
что-то помешало выполнению fetch(). Чтобы обработать ошибку запроса, нужно обратить внимание на поле ok в объекте ответа Response. В случае ошибки запроса оно будет равно false.*/

/*XMLHttpRequest – это встроенный в браузер объект, который даёт возможность делать HTTP-запросы к серверу без перезагрузки страницы.

В современной веб-разработке XMLHttpRequest используется по трём причинам:

- по историческим причинам: существует много кода, использующего XMLHttpRequest, который нужно поддерживать.
- необходимость поддерживать старые браузеры и нежелание использовать полифилы (например, чтобы уменьшить количество кода).
- потребность в функциональности, которую fetch пока что не может предоставить, к примеру, отслеживание прогресса отправки на сервер.

Чтобы сделать запрос, нам нужно выполнить три шага:

1. Создать XMLHttpRequest.

let xhr = new XMLHttpRequest(); // у конструктора нет аргументов

2. Инициализировать его.

xhr.open(method, URL, [async, user, password])
Этот метод обычно вызывается сразу после new XMLHttpRequest. В него передаются основные параметры запроса:

- method – HTTP-метод. Обычно это "GET" или "POST".
- URL – URL, куда отправляется запрос: строка, может быть и объект URL.
- async – если указать false, тогда запрос будет выполнен синхронно, это мы рассмотрим чуть позже.
- user, password – логин и пароль для базовой HTTP-авторизации (если требуется).
Заметим, что вызов open, вопреки своему названию, не открывает соединение. Он лишь конфигурирует запрос, но непосредственно отсылается запрос только лишь после вызова send.

3. Послать запрос.

xhr.send([body])
Этот метод устанавливает соединение и отсылает запрос к серверу. Необязательный параметр body содержит тело запроса (например у метода POST).

4.Слушать события на xhr, чтобы получить ответ.

Три наиболее используемых события:

- load – происходит, когда получен какой-либо ответ, включая ответы с HTTP-ошибкой, например 404.
- error – когда запрос не может быть выполнен, например, нет соединения или невалидный URL.
- progress – происходит периодически во время загрузки ответа, сообщает о прогрессе.

После ответа сервера мы можем получить результат запроса в следующих свойствах xhr:

- status - код состояния HTTP (число): 200, 404, 403 и так далее, может быть 0 в случае, если ошибка не связана с HTTP.
- statusText - сообщение о состоянии ответа HTTP (строка): обычно OK для 200, Not Found для 404, Forbidden для 403, и так далее.
- response (в старом коде может встречаться как responseText) - тело ответа сервера.

Для получения ожидаемого типа ответа используется свойство xhr.responseType (xhr.responseType = 'json';):

- "" (по умолчанию) – строка,
- "text" – строка,
- "arraybuffer" – ArrayBuffer (для бинарных данных, смотрите в ArrayBuffer, бинарные массивы),
- "blob" – Blob (для бинарных данных, смотрите в Blob),
- "document" – XML-документ (может использовать XPath и другие XML-методы),
- "json" – JSON (парсится автоматически).

У XMLHttpRequest есть состояния, которые меняются по мере выполнения запроса. Текущее состояние можно посмотреть в свойстве xhr.readyState.

Для отмены запроса используется свойство xhr.abort()

Чтобы сделать POST-запрос, мы можем использовать встроенный объект FormData.

let formData = new FormData([form]); // создаём объект, по желанию берём данные формы <form>
formData.append(name, value); // добавляем поле

Для отслеживания событий отправки существует xhr.upload. Он генерирует события, похожие на события xhr, но только во время отправки данных на сервер:

- loadstart – начало загрузки данных.
- progress – генерируется периодически во время отправки на сервер.
- abort – загрузка прервана.
- error – ошибка, не связанная с HTTP.
- load – загрузка успешно завершена.
- timeout – вышло время, отведённое на загрузку (при установленном свойстве timeout).
- loadend – загрузка завершена, вне зависимости от того, как – успешно или нет.*/
