//Виртуальный ДОМ (Virtual DOM)

/*В React для каждого объекта настоящего DOM (далее — RDOM) существует соответствующий объект VDOM. VDOM — это объектное представление RDOM, его легковесная копия.
VDOM содержит те же свойства, что и RDOM, но не может напрямую влиять на то, что отображается на экране.*/
//

/*Каждый компонент React проходит один и тот же жизненный цикл:

    Компонент монтируется при добавлении на экран.
    Компонент обновляется , когда он получает новые свойства или состояние, обычно в ответ на взаимодействие.
    Компонент размонтируется , когда его убирают с экрана.*/
//

//Контекст позволяет компонентам передавать информацию глубоко вниз без явной передачи реквизитов.

// Создание контекста

import { createContext } from "react";
const ThemeContext = createContext("light");
//

// Применение контекста в разных конмпонентах

import { ThemeContext } from "./Contexts.js";
const theme = useContext(ThemeContext);
//

//Обнаружение ошибок рендеринга с помощью границы ошибки

/*Граница ошибки (ErrorBoundary) — это специальный компонент, который позволяет отображать резервный пользовательский интерфейс вместо части, в которой произошел сбой,
    например сообщение об ошибке.*/

<ErrorBoundary fallback={<p>Something went wrong</p>}>
  <Profile />
</ErrorBoundary>;
//

//Алгоритм согласования React (React's Reconciliation Algorithm) 

/*Виртуальный ДОМ (Virtual DOM) использует так называемый «снимок» для сравнения и анализа DOM до обновления и DOM после.
    Это момент времени, когда React использует свой алгоритм согласования. Алгоритм согласования рассматривает не только целые элементы DOM, но и отдельные атрибуты.
    Так же алгоритм согласования использует ключи (key), чтобы определить, изменилось ли содержимое.
    По этой причине ключи должны быть уникальными, чтобы при сверке можно было распознать и определить, какие элементы стабильны, а какие нет.*/
//

//Компоненты высшего порядка (HOC)

/*Компоненты высшего порядка (HOC) - это функция, которая принимает компонент в качестве аргумента и возвращает новый компонент, обертывающий исходный компонент.
HOC позволяют добавлять к компоненту дополнительные функции без изменения кода компонента. HOC могут принимать дополнительные аргументы, что позволяет настроить поведение HOC.
Это делает их гибким и многоразовым способом добавления функциональности вашим компонентам.*/
//

//Ссылки на значения (Ref)

/*Ссылка — это простой объект JavaScript с единственным свойством current, которое вы можете читать или устанавливать.
    Установка значения ссылки current не вызывает повторную отрисовку.
    Как и состояние, ссылки позволяют сохранять информацию между повторными рендерингами компонента.
Применение ссылок:
    Хранение идентификаторов тайм-аута
    Хранение и управление элементами DOM
    Сохранение других объектов, которые не нужны для расчета JSX.*/