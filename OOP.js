/*ИНКАПСУЛЯЦИЯ

При проектировании компонентов приложения сокрытие внутренних данных компонента и деталей его реализации от других компонентов приложения
и предоставление набора методов для взаимодействия с ним (API).

Всего модификаторов доступа четыре:
    -public – полный доступ к сущности (полю или методу класса) из любого пакета;
    -protected – доступ к сущности только для классов своего пакета и наследников класса;
    -неявный модификатор по умолчанию (при отсутствии трёх явных) – доступ к сущности только для классов своего пакета;
    -private – доступ только внутри класса, в котором объявлена сущность.
    
    Защищенные свойства объекта начинаются с префикса "_". Обращаться к полю, начинающемуся с "_" можно только из его класса и классов, унаследованных от него.
Приватные свойства и методы должны начинаться с "#". Они доступны только внутри класса.*/
//
//

/*НАСЛЕДОВАНИЕ

Используя наследование, можно создать общий класс, который будет определять характеристики и поведение, свойственные какому-то набору связанных объектов.
В дальнейшем этот класс может быть унаследован другими, более частными классами, которые дополнят или изменят поведение базового класса.

Наследование - это способ расширения одного объекта другим объектом. Наследование в JS реализовано с помощью [[Prototype]]
и конструкции «class».
[[Prototype]] - это свойство, которое имеют все объекты и которое либо равно null, либо ссылается на другой объект. 
Наследоваться от другого объекта с помощью [[Prototype]] можно следующим образом:
- свойство __proto__ (obj1.__proto__ = obj2).
- современного метода Object.create(proto, [descriptors])
( let obj1 = Object.create(obj2) ).

«class» - это конструкция, которая предоставляет новые возможности, полезные для объектно-ориентированного программирования.
Базовый синтаксис:
class MyClass {
	constructor() {…}
	method1() {…}
	method2() {…}
	…
}
Наследоваться от другого объекта с помощью «class» можно следующим образом:
- с помощью ключевого слова «extends»(class Obj1 extends Obj2).

Для переопределения родительских методов или родительского конструктора у классов есть ключевое слово "super".*/
//
//

/*ПОЛИМОРФИЗМ - это возможность функции или объекта работать с данными различных типов. Возможность объекта взаимодействовать с другими объектами через его публичные интерфейсы.
Полиморфизм бывает:
    -параметрический (исполнение одного и того же кода для всех допустимых типов аргументов (в один и тот же метод можно передать как строку, так и число))
    -add-hoc (мнимый полиморфизм, это возможность реализовывать интерфейс разными способами. 
    Интерфейс описывает какие-то публичные методы. Когда реализуются два разных класса от одного интерфейса, можно записать различные реализации одного и того же метода)*/
//
//

/*АБСТРАКЦИЯ - это отделение описания публичного API объекта от его реализации. В TS достигается через абстрактные классы иил интерфесы. 
Это также делается для инверсии зависимостей, чтобы зависимость была на интерфейс*/

/*Перегрузка метода(функции внутри объектов) (ООП) - в родительском классе есть функцияя с реализацией.
В дочернем классе вместо того, чтобы использовать эту функцию будет объявляться и использоваться новая. То есть дочерним методом перегружается метод родителя.*/

/*В ООП между объектами есть связи. Эти связи создаются с помощью ассоциаций.
    Ассоциации - это включение внутрь одного объекта ссылки на другой объект для его дальнейшего использования. Ассоциация бывает двух типов: с помощью композиции и агрегации.
        -композиция - это когда ссылка существует только внутри объекта.
        -агрегация - это когда ссылка существует вне объекта; от этого зависит поведение зависимости при удалении объекта-контейнера.
    В композиции время жизни зависимости ограничено временем жизнью объекта-родителя. В агрегации зависимость может существовать и при удалении родителя.*/
