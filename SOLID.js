/*Принцип единственной ответственности (single responsibility principle) обозначает, что каждая сущность должна иметь одну обязанность
и эта обязанность должна быть полностью инкапсулирована в ней.*/

/*Принцип открытости / закрытости (open-closed principle) декларирует, что сущности должны быть открыты для расширения, но закрыты для изменения.
Это означает, что эти сущности могут менять свое поведение без изменения их исходного кода.*/

/*Принцип подстановки Барбары Лисков (Liskov substitution principle): сущности, которые используют базовый тип, должны иметь возможность использовать подтипы базового типа
не зная об этом.
То есть меняя копии одного интерфейса местами основной функционал должан оставаться неизменным*/

/*Принцип разделения интерфейса (interface segregation principle): сущности не должны зависеть от методов, которые они не используют.
Интерфейсы необходимо разделять на более маленькие и специфические, чтобы они знали только о методах, которые необходимы им в работе*/

/*Принцип инверсии зависимостей (dependency inversion principle) — реализации должны зависеть от абстракций, а абстракции не должны зависеть от реаллизаций*/
//
//
//
/*Принцип программирования YAGNI — «Вам это не понадобится»
Cледование данному принципу заключается в том, что возможности, которые не описаны в требованиях к системе, просто не должны реализовываться.*/

/*KISS — это принцип проектирования и программирования, при котором простота системы декларируется в качестве основной цели или ценности.*/

/*Принцип программирования DRY — don’t repeat yourself / не повторяйте себя
Следование принципу программирования «DRY» позволяет добиться высокой сопровождаемости проекта, простоты внесения изменений и качественного тестирования.*/
