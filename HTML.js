/*Протокол передачи гипертекста (Hypertext Transfer Protocol - HTTP) - это протокол, позволяющий получать различные ресурсы, например HTML-документы.
Протокол HTTP лежит в основе обмена данными в Интернете. HTTP является протоколом клиент-серверного взаимодействия, что означает инициирование запросов к серверу        
самим получателем, обычно веб-браузером (web-browser). Для пересылки своих сообщений чаще всего использует возможности другого протокола - TCP (или TLS - защищённый TCP)
Так же для передачи данных используются протоколы DNS, UDP, IP*/

/*Методы HTTP запроса:

GET - запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.

POST - предназначен для отправки данных на сервер. Тип тела запроса указывается в заголовке Content-Type.

PUT - создаёт новый ресурс или заменяет представление целевого ресурса данными, представленными в теле запроса.

DELETE - удаляет указанный ресурс.

PATCH - частично изменяет ресурс.

OPTIONS - используется для описания параметров соединения с целевым ресурсом.

CONNECT - запускает двустороннюю связь с запрошенным ресурсом. Метод можно использовать для открытия туннеля.

HEAD - запрашивает ресурс так же, как и метод GET, но без тела ответа (только заголовки).

TRACE - выполняет проверку обратной связи по пути к целевому ресурсу, предоставляя полезный механизм отладки.

Разница между PUT, PATCH и POST: PUT является идемпотентным, т.е. единичный и множественные вызовы этого метода, с идентичным набором данных,
будут иметь тот же результат выполнения (без сторонних эффектов). Запрос PATCH является набором инструкций о том, как изменить ресурс и может как быть идемпотентным,
так и не быть. Запрос POST так же может иметь сторонние эфекты и может как быть идемпотентным, так и не быть.*/

/*Код состояния ответа HTTP показывает, был ли успешно выполнен определённый HTTP запрос. Ответы сгруппированы в 5 классов:

Информационные ответы (100 – 199)
Успешные ответы (200 – 299)
Сообщения о перенаправлении (300 – 399)
Ошибки клиента (400 – 499)
Ошибки сервера (500 – 599)*/

/*Техника кеширования заключается в сохранении копии полученного ресурса для возврата этой копии в ответ на дальнейшие запросы, что именьшает нагрузку на основной сервер.
Существуют две основные категории: приватные кеши и кеши совместного использования. В кешах совместного использования (shared cache, прокси-кэш) хранятся копии,
которые могут направляться разным пользователям. Приватный кеш (private cache, кэш браузера) предназначен для отдельного пользователя.
Управление кэшированием происходит при помощи заголовка Cache-Control.*/

/*HTTPS (HTTP Secure) является зашифрованной версией HTTP протокола. Обычно он использует SSL (en-US) или TLS для шифрования соединения между клиентом и сервером.
Это безопасное соединение позволяет клиентам безопасно обмениваться конфиденциальными данными с сервером, например, для банковских операций или онлайн-покупок.*/

/*Cross-Origin Resource Sharing (CORS) — механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность агенту пользователя получать разрешения на доступ
к выбранным ресурсам с сервера на источнике (домене), отличном от того, что сайт использует в данный момент.*/

/*WebSockets - это технология, позволяющая открыть постоянное двунаправленное сетевое соединение между браузером пользователя и сервером.
Библиотеки для вебсокетов: ws, socket.io (поддерживает  сообщения с кастомными именами). Сокеты используются везде, где есть необходимость обновления данных в реальном времени.
//Поллинг имеет смысл, когда нужно от него получать периодично какую-то информацию. Если речь идет о большом количестве инфы, то лучше сначала одним гет-запросом получить
сообщения, а потом сокетами получать их обновления*/

// Создание WebSocket-соединения.
const socket = new WebSocket("ws://localhost:8080");

// Соединение открыто/закрыто("lose")
socket.addEventListener("open", (event) => {
  socket.send("Hello Server!");
});

// Получение сообщений, ошибок("error")
socket.addEventListener("message", (event) => {
  console.log("Message from server ", event.data);
});

/*HTTP cookie (web cookie, куки браузера) - это небольшой фрагмент данных, который сервер отправляет браузеру пользователя. Получив HTTP-запрос, вместе с ответом
сервер может отправить заголовок Set-Cookie. Куки обычно запоминаются браузером и посылаются в HTTP-заголовке Cookie с каждым новым запросом к одному и тому же серверу.
Можно задать срок действия кук, а также срок их жизни, после которого куки не будут отправляться. Также можно указать ограничения на путь и домен.

Куки часто используются для: управления сеансом (логины, корзины для виртуальных покупок), персонализации (пользовательские предпочтения),
трекинга (отслеживания поведения пользователей)

Куки бывают сессионные и постоянные. Сессионный cookie (session cookie) - такие cookie удаляются при закрытии клиента, то есть существуют только на протяжении текущего сеанса.
Постоянные cookie (permanent cookies) удаляются не с закрытием клиента, а при наступлении определённой даты (атрибут Expires) или после определённого интервала времени
(атрибут Max-Age).

"Безопасные" (secure) куки отсылаются на сервер только тогда, когда запрос отправляется по протоколу SSL и HTTPS. Куки с флагом HTTPonly не доступны из JavaScript через свойства
Document.cookie API, что помогает избежать межсайтового скриптинга. Устанавливайте этот флаг для тех кук, к которым не требуется обращаться через JavaScript.
*/

/*Объекты веб-хранилища localStorage и sessionStorage позволяют хранить пары ключ/значение в браузере. Данные, которые в них записаны, сохраняются после обновления
страницы (в случае sessionStorage) и даже после перезапуска браузера (при использовании localStorage).

В отличие от куки, объекты веб-хранилища не отправляются на сервер при каждом запросе. Именно поэтому мы можем хранить гораздо больше данных.

Ещё одно отличие от куки – сервер не может манипулировать объектами хранилища через HTTP-заголовки. Всё делается при помощи JavaScript.

Хранилище привязано к источнику (домен/протокол/порт). Это значит, что разные протоколы или поддомены определяют разные объекты хранилища,
и они не могут получить доступ к данным друг друга.

Объекты хранилища localStorage и sessionStorage предоставляют одинаковые методы и свойства: setItem(key, value) – сохранить пару ключ/значение,
getItem(key) – получить данные по ключу key, removeItem(key) – удалить данные с ключом key, clear() – удалить всё,key(index) – получить ключ на заданной позиции,
length – количество элементов в хранилище.